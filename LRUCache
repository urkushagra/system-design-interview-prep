import java.util.*;

public class LRUCache<K, V> extends LinkedHashMap<K, V> {
    private final int capacity;

    public LRUCache(int capacity) {
        // accessOrder = true → maintains order by access (get/put)
        super(capacity, 0.75f, true);
        this.capacity = capacity;
    }

    @Override
    protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
        // automatically remove the least recently used entry
        return size() > capacity;
    }

    public static void main(String[] args) {
        LRUCache<Integer, String> cache = new LRUCache<>(3);

        cache.put(1, "Apple");
        cache.put(2, "Banana");
        cache.put(3, "Cherry");
        System.out.println(cache);  // {1=Apple, 2=Banana, 3=Cherry}

        cache.get(1);               // access 1 → makes it most recently used
        cache.put(4, "Mango");      // removes 2 (least recently used)
        System.out.println(cache);  // {3=Cherry, 1=Apple, 4=Mango}
    }
}